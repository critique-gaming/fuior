local fui = {}
function fui.intl(namespace, keys)
  return function (key, values)
    local entry = keys[key]
    if not values then
      return entry
    end
    return string.gsub(keys[key], "${([a-zA-Z_][a-zA-Z_0-9]*)}", values)
  end
end

fui.min = math.min
fui.max = math.max
fui.random = math.random

math.randomseed(os.time())
for i = 1, 30 do math.random() end

function fui.define_command(name, f)
  fui[name] = f
end

setmetatable(fui, {
  __index = function (t, field)
    return function (...)
    pprint("Called command " .. field, ...)
  end
end
})

local function compile(filename)
  if not fuior_compiler then
    error("Fuior native extension not present")
  end
  local data = assert(sys.load_resource(filename))
  local func_string = fuior_compiler.compile(data, filename)
  local chunk = assert(loadstring(func_string, filename))
  return chunk()
end

local imported_files = {}
function fui.import(filename)
  if imported_files[filename] then return end
  imported_files[filename] = true
  print("Imported " .. filename)
  compile("/" .. filename)(fui)
end

function init(self)
  print("Compiling and running config.fui...")
  compile("/example/fuior_files/config.fui")(fui)

  print("Compiling and running test.fui...")
  compile("/example/fuior_files/test.fui")(fui)
end
